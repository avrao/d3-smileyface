(function (d3$1) {
  'use strict';

  const svg = d3.select('svg');



  // + = parseFloat

  const height = +svg.attr('height');
  const width = +svg.attr('width');

  const g = svg.append('g')
  	.attr('transform', `translate(${width / 2}, ${height / 2})`);

  console.log(typeof height);

  const circle = g.append('circle');
  circle
    .attr('r', height / 2)
  	.attr('fill', 'yellow')
  	.attr('stroke','#000');

  const eyeSpacing = 100;
  const eyeYOffset = -70;
  const eyeRadius = 30;
  const eyebrowWidth = 50;
  const eyebrowHeight = 20;
  const eyebrowYOffset = -70;

  const eyeGroup = g.append('g')
  	.attr('transform', `translate(0, ${eyeYOffset})`);


  const leftEye = eyeGroup.append('circle');
  leftEye
    .attr('r', eyeRadius)
    .attr('cx', - eyeSpacing);



  const rightEye = eyeGroup.append('circle');
  rightEye
    .attr('r', eyeRadius)
    .attr('cx', eyeSpacing);



  const eyebrowGroup = eyeGroup
    .append('g')
  	.attr('transform', `translate(0, ${eyebrowYOffset})`);

  eyebrowGroup
  .transition().duration(500)
  	.attr('transform', `translate(0, ${eyebrowYOffset - 50})`)
  .transition().duration(500)
    .attr('transform', `translate(0, ${eyebrowYOffset})`);

  const leftEyebrow = eyebrowGroup.append('rect')
    .attr('x', -eyeSpacing - eyebrowWidth / 2)
    .attr('width', eyebrowWidth)
    .attr('height', eyebrowHeight);

  const rightEyebrow = eyebrowGroup.append('rect')
    .attr('x', eyeSpacing - eyebrowWidth / 2)
    .attr('width', eyebrowWidth)
    .attr('height', eyebrowHeight);






  const mouth = g.append('path') 
  	.attr('d', d3$1.arc()({ 
      innerRadius: 110,
      outerRadius: 130,
      startAngle: Math.PI / 2,
      endAngle: Math.PI * 3 / 2
    }));

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNlbGVjdCwgYXJjIH0gZnJvbSAnZDMnO1xuXG5jb25zdCBzdmcgPSBkMy5zZWxlY3QoJ3N2ZycpO1xuXG5cblxuLy8gKyA9IHBhcnNlRmxvYXRcblxuY29uc3QgaGVpZ2h0ID0gK3N2Zy5hdHRyKCdoZWlnaHQnKTtcbmNvbnN0IHdpZHRoID0gK3N2Zy5hdHRyKCd3aWR0aCcpO1xuXG5jb25zdCBnID0gc3ZnLmFwcGVuZCgnZycpXG5cdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7d2lkdGggLyAyfSwgJHtoZWlnaHQgLyAyfSlgKTtcblxuY29uc29sZS5sb2codHlwZW9mIGhlaWdodCk7XG5cbmNvbnN0IGNpcmNsZSA9IGcuYXBwZW5kKCdjaXJjbGUnKTtcbmNpcmNsZVxuICAuYXR0cigncicsIGhlaWdodCAvIDIpXG5cdC5hdHRyKCdmaWxsJywgJ3llbGxvdycpXG5cdC5hdHRyKCdzdHJva2UnLCcjMDAwJyk7XG5cbmNvbnN0IGV5ZVNwYWNpbmcgPSAxMDA7XG5jb25zdCBleWVZT2Zmc2V0ID0gLTcwO1xuY29uc3QgZXllUmFkaXVzID0gMzA7XG5jb25zdCBleWVicm93V2lkdGggPSA1MDtcbmNvbnN0IGV5ZWJyb3dIZWlnaHQgPSAyMDtcbmNvbnN0IGV5ZWJyb3dZT2Zmc2V0ID0gLTcwO1xuXG5jb25zdCBleWVHcm91cCA9IGcuYXBwZW5kKCdnJylcblx0LmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoMCwgJHtleWVZT2Zmc2V0fSlgKTtcblxuXG5jb25zdCBsZWZ0RXllID0gZXllR3JvdXAuYXBwZW5kKCdjaXJjbGUnKTtcbmxlZnRFeWVcbiAgLmF0dHIoJ3InLCBleWVSYWRpdXMpXG4gIC5hdHRyKCdjeCcsIC0gZXllU3BhY2luZylcblxuXG5cbmNvbnN0IHJpZ2h0RXllID0gZXllR3JvdXAuYXBwZW5kKCdjaXJjbGUnKTtcbnJpZ2h0RXllXG4gIC5hdHRyKCdyJywgZXllUmFkaXVzKVxuICAuYXR0cignY3gnLCBleWVTcGFjaW5nKVxuXG5cblxuY29uc3QgZXllYnJvd0dyb3VwID0gZXllR3JvdXBcbiAgLmFwcGVuZCgnZycpXG5cdC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsICR7ZXllYnJvd1lPZmZzZXR9KWApO1xuXG5leWVicm93R3JvdXBcbi50cmFuc2l0aW9uKCkuZHVyYXRpb24oNTAwKVxuXHQuYXR0cigndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgwLCAke2V5ZWJyb3dZT2Zmc2V0IC0gNTB9KWApXG4udHJhbnNpdGlvbigpLmR1cmF0aW9uKDUwMClcbiAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoMCwgJHtleWVicm93WU9mZnNldH0pYClcblxuY29uc3QgbGVmdEV5ZWJyb3cgPSBleWVicm93R3JvdXAuYXBwZW5kKCdyZWN0JylcbiAgLmF0dHIoJ3gnLCAtZXllU3BhY2luZyAtIGV5ZWJyb3dXaWR0aCAvIDIpXG4gIC5hdHRyKCd3aWR0aCcsIGV5ZWJyb3dXaWR0aClcbiAgLmF0dHIoJ2hlaWdodCcsIGV5ZWJyb3dIZWlnaHQpO1xuXG5jb25zdCByaWdodEV5ZWJyb3cgPSBleWVicm93R3JvdXAuYXBwZW5kKCdyZWN0JylcbiAgLmF0dHIoJ3gnLCBleWVTcGFjaW5nIC0gZXllYnJvd1dpZHRoIC8gMilcbiAgLmF0dHIoJ3dpZHRoJywgZXllYnJvd1dpZHRoKVxuICAuYXR0cignaGVpZ2h0JywgZXllYnJvd0hlaWdodCk7XG5cblxuXG5cblxuXG5jb25zdCBtb3V0aCA9IGcuYXBwZW5kKCdwYXRoJykgXG5cdC5hdHRyKCdkJywgYXJjKCkoeyBcbiAgICBpbm5lclJhZGl1czogMTEwLFxuICAgIG91dGVyUmFkaXVzOiAxMzAsXG4gICAgc3RhcnRBbmdsZTogTWF0aC5QSSAvIDIsXG4gICAgZW5kQW5nbGU6IE1hdGguUEkgKiAzIC8gMlxuICB9KSk7Il0sIm5hbWVzIjpbImFyYyJdLCJtYXBw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